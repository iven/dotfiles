#!/usr/bin/env python3

import json
import os
import re
import subprocess
import sys
from dataclasses import dataclass
from pathlib import Path
from typing import Any, Dict, List


class Colors:
    RESET = "\033[0m"
    RED = "\033[31m"
    GREEN = "\033[32m"
    BLUE = "\033[34m"
    BOLD = "\033[1m"


class AppError(Exception):
    """应用程序错误基类"""

    pass


class ConfigError(AppError):
    """配置相关错误"""

    pass


class InputError(AppError):
    """用户输入相关错误"""

    pass


@dataclass
class Match:
    line_number: int
    description: str
    match_index: int


@dataclass
class FileMatches:
    path: Path
    matches: List[Match]

    def to_json(self) -> Dict[str, Any]:
        return {
            "filename": str(self.path),
            "matches": [
                {
                    "line_number": match.line_number,
                    "column": match.match_index + 1,
                    "description": match.description,
                }
                for match in self.matches
            ],
        }


class Config:
    """应用程序配置管理"""

    CACHE_DIR = Path("~/.cache/srg").expanduser()

    def __init__(self):
        self.cache_dir = self.CACHE_DIR
        self.shortcuts_file = self.cache_dir / "shortcuts.json"
        self.editor = os.getenv("EDITOR", "vim")

    def ensure_cache_dir(self) -> None:
        """确保缓存目录存在"""
        self.cache_dir.mkdir(parents=True, exist_ok=True)

    def load_shortcuts(self) -> List[Dict]:
        """加载快捷方式文件"""
        try:
            with open(self.shortcuts_file) as f:
                return json.load(f)
        except FileNotFoundError:
            raise ConfigError("快捷方式文件不存在，请先执行搜索")
        except json.JSONDecodeError:
            raise ConfigError("快捷方式文件格式错误")

    def save_shortcuts(self, data: List[Dict]) -> None:
        """保存快捷方式文件"""
        self.ensure_cache_dir()
        with open(self.shortcuts_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)


class ResultFormatter:
    """搜索结果格式化"""

    @staticmethod
    def format_path(path: Path) -> str:
        """格式化路径，将 home 目录替换为 ~"""
        return str(path).replace(str(Path.home()), "~")

    @staticmethod
    def format_match(match: Match, count: int, search_term: str = "") -> str:
        """格式化单个匹配结果"""
        line_number = str(match.line_number).rjust(3)
        count_str = f"{Colors.BLUE}{Colors.BOLD}[{count}]{Colors.RESET}"

        description = match.description[:200]
        if search_term:
            colored_desc = re.sub(
                f"({re.escape(search_term)})",
                f"{Colors.RED}\\1{Colors.RESET}",
                description,
                flags=re.IGNORECASE,
            )
        else:
            colored_desc = description

        return f"    {count_str} {line_number} : {colored_desc}\n"

    @classmethod
    def format_results(
        cls, file_matches: List[FileMatches], search_term: str = ""
    ) -> str:
        """格式化所有搜索结果"""
        result = []
        count = 1

        for file_match in file_matches:
            result.append(
                f"{Colors.GREEN}{cls.format_path(file_match.path)}{Colors.RESET}\n"
            )

            for match in file_match.matches:
                result.append(cls.format_match(match, count, search_term))
                count += 1

            result.append("\n")

        return "".join(result).strip()


class Searcher:
    """搜索功能实现"""

    def __init__(self, config: Config, search_term: str):
        self.config = config
        self.search_term = search_term
        self.file_matches: Dict[Path, FileMatches] = {}

    def run(self) -> None:
        """执行搜索并保存结果"""
        output = self._run_ripgrep()
        self._parse_output(output)

        results = list(self.file_matches.values())
        try:
            print(ResultFormatter.format_results(results, self.search_term))
        except BrokenPipeError:
            sys.exit(74)

        self.config.save_shortcuts([fm.to_json() for fm in results])

    def _run_ripgrep(self) -> str:
        """运行 ripgrep 命令并返回 JSON 输出"""
        try:
            return subprocess.check_output(
                [
                    "rg",
                    "--json",
                    "-S",
                    "--hidden",
                    "-g",
                    "!**/.git/**",
                    self.search_term,
                ],
                text=True,
            )
        except subprocess.CalledProcessError as e:
            if e.returncode == 1:  # rg returns 1 when no matches found
                sys.exit(1)
            raise

    def _parse_output(self, output: str) -> None:
        """解析 ripgrep 的 JSON 输出"""
        current_file = None
        for json_line in output.splitlines():
            try:
                data = json.loads(json_line)
                if data["type"] == "begin":
                    current_file = Path.cwd() / data["data"]["path"]["text"]
                elif data["type"] == "match" and current_file:
                    self._handle_match(data["data"], current_file)
            except json.JSONDecodeError:
                continue

    def _handle_match(self, match_data: dict, file_path: Path) -> None:
        """处理单个匹配结果"""
        lines = match_data["lines"]
        try:
            description = lines["text"].rstrip()
        except KeyError:
            description = lines["bytes"].rstrip()

        try:
            match_index = description.lower().index(self.search_term.lower())
        except ValueError:
            match_index = 0

        match = Match(
            line_number=match_data["line_number"],
            description=description,
            match_index=match_index,
        )

        if file_path not in self.file_matches:
            self.file_matches[file_path] = FileMatches(path=file_path, matches=[])
        self.file_matches[file_path].matches.append(match)


class ShortcutJumper:
    """快捷方式跳转功能实现"""

    def __init__(self, config: Config):
        self.config = config

    def jump_to_match(self, index: int) -> None:
        """跳转到指定索引的匹配结果"""
        shortcut = self._get_match(index)
        vim_cmd = f"+{shortcut['line_no']} {shortcut['filename']}"
        subprocess.run([self.config.editor] + vim_cmd.split())

    def _get_match(self, index: int) -> dict:
        """获取指定索引的匹配结果"""
        shortcuts = self.config.load_shortcuts()
        total_matches = 0

        for file_entry in shortcuts:
            matches = file_entry["matches"]
            if total_matches + len(matches) > index:
                match = matches[index - total_matches]
                return {
                    "filename": file_entry["filename"],
                    "line_no": match["line_number"],
                }
            total_matches += len(matches)

        raise InputError("索引超出范围")


class App:
    """应用程序主类"""

    def __init__(self):
        self.config = Config()

    def run(self) -> None:
        """运行应用程序"""
        try:
            args = sys.argv[1:]
            program = Path(sys.argv[0]).name

            if program == "F":
                self._run_jumper(args)
            else:
                self._run_searcher(args)

        except AppError as e:
            print(f"错误：{str(e)}", file=sys.stderr)
            sys.exit(1)

    def _run_jumper(self, args: List[str]) -> None:
        """运行跳转功能"""
        if not args:
            raise InputError("请提供跳转索引")

        try:
            index = int(args[0]) - 1
            if index < 0:
                raise ValueError
        except ValueError:
            raise InputError("请提供有效的跳转索引")

        jumper = ShortcutJumper(self.config)
        jumper.jump_to_match(index)

    def _run_searcher(self, args: List[str]) -> None:
        """运行搜索功能"""
        if not args:
            raise InputError("请提供搜索关键词")

        searcher = Searcher(self.config, " ".join(args))
        searcher.run()


if __name__ == "__main__":
    App().run()
